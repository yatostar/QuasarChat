#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('quasarchat:server');
var http = require('http');

var mongoose = require('../mongo');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
* socket.io
*/
// var chatServe = http.createServer(app);
// var io = require('socket.io')(chatServe);

// chatServe.listen(app.get(8088),function() {
//   console.log('Chat Server listening on port 8088');
// });

io.on('connection', function(socket) {
  console.log('a user connected');

  socket.on('disconnect', function() {
	console.log('user disconnected');
  });

  socket.on('join', function(data) {
	var user_email = data.user_email,
		user_name = data.user_name,
		photo_option = data.photo_option,
		fpass = data.fpass,
		cpass = data.cpass;

	// check for empty fields
	if (user_email == '' || cpass == '' || fpass == '') {
		socket.emit('alert', 'Whoops, you missed some fields!');
		return;
	}

	// check for matching passwords
	if (fpass !== cpass) {
		socket.emit('alert', 'Passwords don\'t match');
		return;
	}

	// create a database variable
	var UserModel = require('../models/UserModel');
	var users = UserModel.find({}, function(err, users) {
		if (err) throw err;

		var new_user = user_email;
		var doesUserExist = function(newUser, res) {
			if (res.length) {
			  for(var i = 0; i < res.length; i++){
				var answer;
				if(newUser === res[i].user_email){
					answer = "exists";
					break;
				} else {
				  answer = "does not exist";   
				}
			  }
			  return answer;
			} else {
				return answer = "does not exist";
			}
		};

		var found = doesUserExist(new_user, users);
		if (found !== "exists") {
			var new_user = new UserModel;
			new_user.user_email = user_email;
			new_user.user_name = user_name;
			new_user.photo_option = photo_option;
			new_user.password = fpass;
			new_user.save();
		}
		else {
			socket.emit('alert', "Username already exists. Please use another one");
		}
	});
  });

  socket.on('login', function(login_info) {
  	var this_user_email = login_info.user_email,
        this_user_password = login_info.user_password;

    if (this_user_email === '' || this_user_password === '') {
        socket.emit('alert', 'You must fill in both fields');
    }
    else {
    	var UserModel = require('../models/UserModel');
    	UserModel.find({user_email: this_user_email}, function(err, res) {
    		if (err) throw err;

    		if (res.length > 0) {
    			if (res[0].password == this_user_password) {
    				socket.emit('redirect', 'chat');
    			}
    			else {
    				socket.emit('alert', 'Please retry to enter password');
    			}
    		}
    		else {
    			socket.emit('alert', 'Sorry, could not find you. Please sign up.');
    		}

    	});
    }
  });

  socket.on('chat-connection', function(ss_user_email) {
  	var UserModel = require('../models/UserModel');
  	UserModel.find({user_email: ss_user_email}, function(err, res) {
  		if (err) throw err;

  		if (res.length == 0) {
  			socket.emit('alert', 'Please login again');
  			return;
  		}

  		var user = res[0];

  		socket.broadcast.emit('status', user.user_name + ' has just joined the chatroom.');

  		socket.emit('update-title', user.user_name);

  		// get messages collection
  		var sendStatus = function(s) {
  				socket.emit('status', s);
  			};

  		// emit all chat messages
  		var MessageModel = require('../models/MessageModel');
  		MessageModel.find().limit(50).exec(function(err, res) {
  			if (err) throw err;

  			socket.emit('output', res);
  		});

  		// wait for input
  		socket.on('input', function(data) {
  			var email = data.email,
                photo = user.photo_option,
                name = user.user_name,
                message = data.message;

            var new_msg = new MessageModel({
            	email: email,
            	name: name,
            	photo: photo,
            	message: message
            });

            if (message !== "") {
            	new_msg.save(function(err) {
            		io.emit('output', [new_msg]);

            		sendStatus({
            			message: "Message sent",
            			clear: true
            		});
            	});
            }
            else {
            	sendStatus('Name or message is missing');
            }
  		});

  		socket.on('disconnect', function() {
  			socket.broadcast.emit('status', user.user_name + ' has just left the chat room.');
  		});
  	});
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
	// named pipe
	return val;
  }
  if (port >= 0) {
	// port number
	return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
	throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
	case 'EACCES':
	  console.error(bind + ' requires elevated privileges');
	  process.exit(1);
	  break;
	case 'EADDRINUSE':
	  console.error(bind + ' is already in use');
	  process.exit(1);
	  break;
	default:
	  throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
